#include <iostream>
#include <limits>
using namespace std;

#define HUMAN 'O'
#define AI 'X'

// Function to print the board
void printBoard(char board[3][3]) {
    cout << "\n";
    for (int i = 0; i < 3; i++) {
        cout << " ";
        for (int j = 0; j < 3; j++) {
            cout << board[i][j];
            if (j < 2) cout << " | ";
        }
        cout << "\n";
        if (i < 2) cout << "---+---+---\n";
    }
    cout << "\n";
}

// Check if moves are left
bool isMovesLeft(char board[3][3]) {
    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++)
            if (board[i][j] == ' ')
                return true;
    return false;
}

// Evaluate the board
int evaluate(char board[3][3]) {
    // Checking Rows
    for (int row = 0; row < 3; row++) {
        if (board[row][0] == board[row][1] && board[row][1] == board[row][2]) {
            if (board[row][0] == AI)
                return +10;
            else if (board[row][0] == HUMAN)
                return -10;
        }
    }

    // Checking Columns
    for (int col = 0; col < 3; col++) {
        if (board[0][col] == board[1][col] && board[1][col] == board[2][col]) {
            if (board[0][col] == AI)
                return +10;
            else if (board[0][col] == HUMAN)
                return -10;
        }
    }

    // Checking Diagonals
    if (board[0][0] == board[1][1] && board[1][1] == board[2][2]) {
        if (board[0][0] == AI)
            return +10;
        else if (board[0][0] == HUMAN)
            return -10;
    }

    if (board[0][2] == board[1][1] && board[1][1] == board[2][0]) {
        if (board[0][2] == AI)
            return +10;
        else if (board[0][2] == HUMAN)
            return -10;
    }

    return 0;
}

// Minimax function
int minimax(char board[3][3], int depth, bool isMax) {
    int score = evaluate(board);

    if (score == 10) return score - depth; // prefer quicker win
    if (score == -10) return score + depth; // prefer slower loss
    if (!isMovesLeft(board)) return 0;

    if (isMax) {
        int best = numeric_limits<int>::min();

        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] == ' ') {
                    board[i][j] = AI;
                    best = max(best, minimax(board, depth + 1, !isMax));
                    board[i][j] = ' ';
                }
            }
        }
        return best;
    } else {
        int best = numeric_limits<int>::max();

        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] == ' ') {
                    board[i][j] = HUMAN;
                    best = min(best, minimax(board, depth + 1, !isMax));
                    board[i][j] = ' ';
                }
            }
        }
        return best;
    }
}

// Find the best move for AI
pair<int,int> findBestMove(char board[3][3]) {
    int bestVal = numeric_limits<int>::min();
    pair<int,int> bestMove = {-1, -1};

    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (board[i][j] == ' ') {
                board[i][j] = AI;
                int moveVal = minimax(board, 0, false);
                board[i][j] = ' ';
                if (moveVal > bestVal) {
                    bestMove = {i, j};
                    bestVal = moveVal;
                }
            }
        }
    }
    return bestMove;
}

int main() {
    char board[3][3] = { {' ', ' ', ' '},
                         {' ', ' ', ' '},
                         {' ', ' ', ' '} };

    cout << "Tic Tac Toe with Minimax AI\n";
    cout << "You are 'O', AI is 'X'\n";
    cout << "Enter your move as row and column (0-2)\n\n";

    printBoard(board);

    while (true) {
        int row, col;

        // Human Move
        cout << "Your move (row col): ";
        cin >> row >> col;
        if (row < 0 || row > 2 || col < 0 || col > 2 || board[row][col] != ' ') {
            cout << "Invalid move! Try again.\n";
            continue;
        }
        board[row][col] = HUMAN;
        printBoard(board);

        if (evaluate(board) == -10) {
            cout << "You win!\n";
            break;
        }
        if (!isMovesLeft(board)) {
            cout << "It's a Draw!\n";
            break;
        }

        // AI Move
        pair<int,int> bestMove = findBestMove(board);
        board[bestMove.first][bestMove.second] = AI;
        cout << "AI played (" << bestMove.first << ", " << bestMove.second << ")\n";
        printBoard(board);

        if (evaluate(board) == 10) {
            cout << "AI wins!\n";
            break;
        }
        if (!isMovesLeft(board)) {
            cout << "It's a Draw!\n";
            break;
        }
    }
    return 0;
}
